/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s-controller-sample/api/rollout_sample/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RolloutSampleLister helps list RolloutSamples.
// All objects returned here must be treated as read-only.
type RolloutSampleLister interface {
	// List lists all RolloutSamples in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RolloutSample, err error)
	// RolloutSamples returns an object that can list and get RolloutSamples.
	RolloutSamples(namespace string) RolloutSampleNamespaceLister
	RolloutSampleListerExpansion
}

// rolloutSampleLister implements the RolloutSampleLister interface.
type rolloutSampleLister struct {
	indexer cache.Indexer
}

// NewRolloutSampleLister returns a new RolloutSampleLister.
func NewRolloutSampleLister(indexer cache.Indexer) RolloutSampleLister {
	return &rolloutSampleLister{indexer: indexer}
}

// List lists all RolloutSamples in the indexer.
func (s *rolloutSampleLister) List(selector labels.Selector) (ret []*v1.RolloutSample, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RolloutSample))
	})
	return ret, err
}

// RolloutSamples returns an object that can list and get RolloutSamples.
func (s *rolloutSampleLister) RolloutSamples(namespace string) RolloutSampleNamespaceLister {
	return rolloutSampleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RolloutSampleNamespaceLister helps list and get RolloutSamples.
// All objects returned here must be treated as read-only.
type RolloutSampleNamespaceLister interface {
	// List lists all RolloutSamples in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RolloutSample, err error)
	// Get retrieves the RolloutSample from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.RolloutSample, error)
	RolloutSampleNamespaceListerExpansion
}

// rolloutSampleNamespaceLister implements the RolloutSampleNamespaceLister
// interface.
type rolloutSampleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RolloutSamples in the indexer for a given namespace.
func (s rolloutSampleNamespaceLister) List(selector labels.Selector) (ret []*v1.RolloutSample, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RolloutSample))
	})
	return ret, err
}

// Get retrieves the RolloutSample from the indexer for a given namespace and name.
func (s rolloutSampleNamespaceLister) Get(name string) (*v1.RolloutSample, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("rolloutsample"), name)
	}
	return obj.(*v1.RolloutSample), nil
}
