/*
   zlw
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s-controller-sample/api/sample/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SampleLister helps list Samples.
// All objects returned here must be treated as read-only.
type SampleLister interface {
	// List lists all Samples in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Sample, err error)
	// Samples returns an object that can list and get Samples.
	Samples(namespace string) SampleNamespaceLister
	SampleListerExpansion
}

// sampleLister implements the SampleLister interface.
type sampleLister struct {
	indexer cache.Indexer
}

// NewSampleLister returns a new SampleLister.
func NewSampleLister(indexer cache.Indexer) SampleLister {
	return &sampleLister{indexer: indexer}
}

// List lists all Samples in the indexer.
func (s *sampleLister) List(selector labels.Selector) (ret []*v1.Sample, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Sample))
	})
	return ret, err
}

// Samples returns an object that can list and get Samples.
func (s *sampleLister) Samples(namespace string) SampleNamespaceLister {
	return sampleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SampleNamespaceLister helps list and get Samples.
// All objects returned here must be treated as read-only.
type SampleNamespaceLister interface {
	// List lists all Samples in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Sample, err error)
	// Get retrieves the Sample from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Sample, error)
	SampleNamespaceListerExpansion
}

// sampleNamespaceLister implements the SampleNamespaceLister
// interface.
type sampleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Samples in the indexer for a given namespace.
func (s sampleNamespaceLister) List(selector labels.Selector) (ret []*v1.Sample, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Sample))
	})
	return ret, err
}

// Get retrieves the Sample from the indexer for a given namespace and name.
func (s sampleNamespaceLister) Get(name string) (*v1.Sample, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("sample"), name)
	}
	return obj.(*v1.Sample), nil
}
